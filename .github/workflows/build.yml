name: Build Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 PyInstaller
        pip install -r requirements.txt
    - name: Build with PyInstaller and Bundle More Plugins
      shell: bash
      run: |
        PYQT6_DIR=$(python -c "import PyQt6; import os; print(os.path.dirname(PyQt6.__file__))" | sed 's/\\/\//g')
        echo "PyQt6 base directory: $PYQT6_DIR"

        # Base PyInstaller arguments using bash array
        PYINSTALLER_ARGS=(
          --name qtwebscrub
          --windowed
          --onefile
          --add-data "src/VideoPlayer.qml;src" # Windows uses ';' separator for paths
          --add-data "data;data" # include data folder (mapping, categories) in bundle
        )

        PLUGIN_DIRS=(
          "multimedia"
          "mediaservice"
          "imageformats"
          "audio"
          "platforms"
          "renderers"
          "styles"
          "platformthemes"
          "iconengines"
        )

        for PLUGIN_DIR in "${PLUGIN_DIRS[@]}"; do
          FULL_PLUGIN_PATH="$PYQT6_DIR/Qt6/plugins/$PLUGIN_DIR"
          if [ -d "$FULL_PLUGIN_PATH" ]; then
            echo "Queueing binaries from: $FULL_PLUGIN_PATH"
            # Use --add-binary=SOURCE;DEST syntax for Windows (matching error msg structure)
            PYINSTALLER_ARGS+=("--add-binary=$FULL_PLUGIN_PATH/*;PyQt6/Qt6/plugins/$PLUGIN_DIR")
          else
            echo "Warning: Plugin directory not found: $FULL_PLUGIN_PATH"
          fi
        done

        # Add main script to arguments
        PYINSTALLER_ARGS+=(main.py)

        echo "Executing PyInstaller with args:"
        printf "  %q\n" "${PYINSTALLER_ARGS[@]}" # Debug print args
        pyinstaller "${PYINSTALLER_ARGS[@]}" # Execute with array expansion
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/qtwebscrub.exe

  build-macos-arm:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 PyInstaller
        pip install -r requirements.txt
    - name: Build with PyInstaller and Bundle More Plugins
      shell: bash
      run: |
        PYQT6_DIR=$(python -c "import PyQt6; import os; print(os.path.dirname(PyQt6.__file__))")
        echo "PyQt6 base directory: $PYQT6_DIR"

        # Base PyInstaller arguments using bash array
        PYINSTALLER_ARGS=(
          --name qtwebscrub
          --windowed
          --onedir
          --add-data "src/VideoPlayer.qml:src" # macOS uses ':' separator for paths
          --add-data "data:data" # include data folder (mapping, categories) in bundle
        )

        PLUGIN_DIRS=(
          "multimedia"
          "mediaservice"
          "imageformats"
          "audio"
          "platforms"
          "renderers"
          "styles"
          "platformthemes"
          "iconengines"
        )

        for PLUGIN_DIR in "${PLUGIN_DIRS[@]}"; do
          FULL_PLUGIN_PATH="$PYQT6_DIR/Qt6/plugins/$PLUGIN_DIR"
          if [ -d "$FULL_PLUGIN_PATH" ]; then
            echo "Queueing binaries from: $FULL_PLUGIN_PATH"
             # Use --add-binary=SOURCE:DEST syntax for macOS/Linux
            PYINSTALLER_ARGS+=("--add-binary=$FULL_PLUGIN_PATH/*:PyQt6/Qt6/plugins/$PLUGIN_DIR")
          else
            echo "Warning: Plugin directory not found: $FULL_PLUGIN_PATH"
          fi
        done

        # Add main script to arguments
        PYINSTALLER_ARGS+=(main.py)

        echo "Executing PyInstaller with args:"
        printf "  %q\n" "${PYINSTALLER_ARGS[@]}" # Debug print args
        pyinstaller "${PYINSTALLER_ARGS[@]}" # Execute with array expansion
    - name: Install create-dmg
      run: |
        brew install create-dmg
    - name: Create DMG
      run: |
        create-dmg --volname "QTWebScrub" --window-pos 200 120 --window-size 600 300 --icon-size 100 --app-drop-link 425 120 "dist/QTWebScrub.dmg" "dist/qtwebscrub.app"
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm-dmg
        path: dist/QTWebScrub.dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # Install only base GStreamer libs, assuming bundled Qt plugin is sufficient
    - name: Install Base Multimedia System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav libgstreamer-gl1.0-0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 PyInstaller
        pip install -r requirements.txt
    - name: Build with PyInstaller and Bundle More Plugins
      shell: bash
      run: |
        PYQT6_DIR=$(python -c "import PyQt6; import os; print(os.path.dirname(PyQt6.__file__))")
        echo "PyQt6 base directory: $PYQT6_DIR"

        # Base PyInstaller arguments using bash array
        PYINSTALLER_ARGS=(
          --name qtwebscrub
          --windowed
          --onefile
          --add-data "src/VideoPlayer.qml:src" # Linux uses ':' separator for paths
          --add-data "data:data" # include data folder (mapping, categories) in bundle
        )

        PLUGIN_DIRS=(
          "multimedia"
          "mediaservice"
          "imageformats"
          "audio"
          "platforms"
          "renderers"
          "styles"
          "platformthemes"
          "iconengines"
          "xcbglintegrations"
          "wayland-shell-integration"
          "wayland-graphics-integration-client"
          "wayland-decoration-client"
        )

        for PLUGIN_DIR in "${PLUGIN_DIRS[@]}"; do
          FULL_PLUGIN_PATH="$PYQT6_DIR/Qt6/plugins/$PLUGIN_DIR"
          if [ -d "$FULL_PLUGIN_PATH" ]; then
            echo "Queueing binaries from: $FULL_PLUGIN_PATH"
             # Use --add-binary=SOURCE:DEST syntax for macOS/Linux
            PYINSTALLER_ARGS+=("--add-binary=$FULL_PLUGIN_PATH/*:PyQt6/Qt6/plugins/$PLUGIN_DIR")
          else
            echo "Warning: Plugin directory not found: $FULL_PLUGIN_PATH"
          fi
        done

        # Add main script to arguments
        PYINSTALLER_ARGS+=(main.py)

        echo "Executing PyInstaller with args:"
        printf "  %q\n" "${PYINSTALLER_ARGS[@]}" # Debug print args
        pyinstaller "${PYINSTALLER_ARGS[@]}" # Execute with array expansion
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-bin
        path: dist/qtwebscrub
